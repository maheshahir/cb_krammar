I"ó(function() {
  var BotRouter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.Bot = (function(superClass) {
    extend(Bot, superClass);

    Bot.prototype.header = 'Bot Settings';

    function Bot() {
      Bot.__super__.constructor.apply(this, arguments);
      this.render();
    }

    Bot.prototype.load = function() {
      this.startLoading();
      return this.ajax({
        id: 'version',
        type: 'GET',
        url: this.apiPath + "/version",
        success: (function(_this) {
          return function(data) {
            _this.stopLoading();
            _this.version = data.version;
            return _this.render();
          };
        })(this)
      });
    };

    Bot.prototype.render = function() {
      return this.html(App.view('version')({
        version: this.version
      }));
    };

    return Bot;

  })(App.Controller);

  BotRouter = (function(superClass) {
    extend(BotRouter, superClass);

    BotRouter.prototype.requiredPermission = ['*'];

    function BotRouter(params) {
      BotRouter.__super__.constructor.apply(this, arguments);
      this.authenticateCheckRedirect();
      App.TaskManager.execute({
        key: 'Bot',
        controller: 'Bot',
        params: {},
        show: true,
        persistent: true
      });
    }

    return BotRouter;

  })(App.ControllerPermanent);

  App.Config.set('bot', BotRouter, 'Routes');

  App.Config.set('Bot', {
    controller: 'Bot',
    permission: ['*']
  }, 'permanentTask');

}).call(this);
:ET